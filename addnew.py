#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 25, 2018 03:56:22 PM IST  platform: Windows NT
import pymysql
import login
from tkinter import messagebox
import transaction
import update
import sys
import dbs
import home
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import addnew_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    addnew_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    addnew_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
Entry1,Entry2=('','');
amount,date=('0','');
popup=''
class Toplevel1:
    def register(self):
        global amount,date
        self.flatno1 = self.flatno.get().lower()
        self.ownername1= self.ownername.get()
        self.address1 = self.address.get("1.0","end-1c")
        self.area1 = self.areatxt.get()
        self.security1 = self.deposit.get()
        self.due1 = self.due_deposit.get()
        self.maintainence1 = self.maintanence.get()
        self.contact1 = self.conentry.get()
        self.remark1 = self.remark.get()
        print(amount)
        if(len(self.flatno1)>1 and len(self.contact1)>8):
            # prepare a cursor object using cursor() method
            cursor = dbs.db.cursor()
            total_due=(int(self.maintainence1)*12)+int(amount)
            # Prepare SQL query to INSERT a record into the database.
            sql = "INSERT INTO flat_details(flat_no, \
            owner_name, address, area, security,due_amount,maintainance,contact,remark,last_year_balance,last_year_date,total_due) \
            VALUES ('%s', '%s', '%s', '%s' , '%s', '%s', '%s', '%s', '%s','%s','%s','%s')" % \
            (self.flatno1,self.ownername1,self.address1,self.area1,self.security1,self.due1,self.maintainence1,self.contact1,self.remark1,amount,date,str(total_due))
            try:
                cursor.execute(sql)
                # Commit your changes in the database
                dbs.db.commit()
                messagebox.showinfo("SAVED", "Information Successfully Submitted")
                root.destroy()
                home.vp_start_gui()
                
            except:
                # Rollback in case there is any error
                dbs.db.rollback()
                dbs.db.close()
                messagebox.showerror("Error", "Already Exist!")
        else:
            messagebox.showerror("Error", "Please Enter Correct Detail")
    #def reset1(self):
     #   self.flatno.delete("0", 'end')
    def addingamount(self):
        global Entry1,Entry2
        global amount,date
        global popup
        amount=Entry1.get()
        date=Entry2.get()
        messagebox.showinfo("Success","Entry Done!")
        popup.destroy()
    def addlastamount(self):
        global Entry1,Entry2,popup
        popup = tk.Tk()
        
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        popup.geometry("500x300+332+160")
        popup.title("Last Year Balance")
        popup.configure(background="#2c3e50")

        self.Label1 = tk.Label(popup)
        self.Label1.place(relx=0.22, rely=0.167, height=21, width=104)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Enter amount''')
        self.Label1.configure(width=104)

        Entry1 = tk.Entry(popup)
        Entry1.place(relx=0.52, rely=0.167,height=20, relwidth=0.328)
        Entry1.configure(background="white")
        Entry1.configure(disabledforeground="#a3a3a3")
        Entry1.configure(font="TkFixedFont")
        Entry1.configure(foreground="#000000")
        Entry1.configure(insertbackground="black")

        self.Label2 = tk.Label(popup)
        self.Label2.place(relx=0.26, rely=0.333, height=21, width=74)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Date''')
        self.Label2.configure(width=74)

        Entry2 = tk.Entry(popup)
        Entry2.place(relx=0.52, rely=0.333,height=20, relwidth=0.328)
        Entry2.configure(background="white")
        Entry2.configure(disabledforeground="#a3a3a3")
        Entry2.configure(font="TkFixedFont")
        Entry2.configure(foreground="#000000")
        Entry2.configure(insertbackground="black")

        self.Button1 = tk.Button(popup,command=self.addingamount)
        self.Button1.place(relx=0.32, rely=0.533, height=24, width=57)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f1f1f1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''OK''')
        self.Button1.configure(width=57)

        self.Button2 = tk.Button(popup,command=popup.destroy)
        self.Button2.place(relx=0.54, rely=0.533, height=24, width=57)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#f1f1f1")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''CANCEL''')
        self.Button2.configure(width=57)
        popup.resizable(False,False)
        popup.mainloop()
    def searchbtn1(self):
        print("hello")
        root.destroy()
        update.vp_start_gui1()

    def home_btn(self):
        root.destroy()
        home.vp_start_gui()
    def btnMonthly(self):
        root.destroy()
        transaction.vp_start_gui()
    def logout1(self):
        root.destroy()
        login.vp_start_gui()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI Semilight} -size 16 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        font11 = "-family Arial -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family {Arabic Transparent} -size 9 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("800x684+263+13")
        top.title("Entry-Form")
        top.configure(background="#2c3e50")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top,command=self.home_btn)
        self.Button1.place(relx=0.025, rely=0.029, height=44, width=137)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f1f1f1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''HOME''')

        self.Button1_1 = tk.Button(top,command=self.btnMonthly)
        self.Button1_1.place(relx=0.025, rely=0.234, height=44, width=147)
        self.Button1_1.configure(activebackground="#d9d9d9")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#f1f1f1")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''MONTHLY PAY''')

        self.Button1_2 = tk.Button(top, command=self.searchbtn1)
        self.Button1_2.place(relx=0.025, rely=0.132, height=44, width=137)
        self.Button1_2.configure(activebackground="#d9d9d9")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#f1f1f1")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''SEARCH''')

        

        self.Button1_6 = tk.Button(top,command=self.logout1)
        self.Button1_6.place(relx=0.038, rely=0.863, height=34, width=117)
        self.Button1_6.configure(activebackground="#d9d9d9")
        self.Button1_6.configure(activeforeground="#000000")
        self.Button1_6.configure(background="#f1f1f1")
        self.Button1_6.configure(disabledforeground="#a3a3a3")
        self.Button1_6.configure(foreground="#000000")
        self.Button1_6.configure(highlightbackground="#d9d9d9")
        self.Button1_6.configure(highlightcolor="black")
        self.Button1_6.configure(pady="0")
        self.Button1_6.configure(text='''LOGOUT''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.25, rely=0.161, height=21, width=152)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font11)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''FLAT NO.''')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.25, rely=0.278, height=21, width=152)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font11)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''ADDRESS''')

        self.Label1_9 = tk.Label(top)
        self.Label1_9.place(relx=0.25, rely=0.497, height=21, width=152)
        self.Label1_9.configure(activebackground="#f9f9f9")
        self.Label1_9.configure(activeforeground="black")
        self.Label1_9.configure(background="#d9d9d9")
        self.Label1_9.configure(disabledforeground="#a3a3a3")
        self.Label1_9.configure(font=font9)
        self.Label1_9.configure(foreground="#000000")
        self.Label1_9.configure(highlightbackground="#d9d9d9")
        self.Label1_9.configure(highlightcolor="black")
        self.Label1_9.configure(text='''SECURITY DEPOSITE''')

        self.deposit = tk.Entry(top)
        self.deposit.place(relx=0.6, rely=0.497,height=20, relwidth=0.23)
        self.deposit.configure(background="white")
        self.deposit.configure(disabledforeground="#a3a3a3")
        self.deposit.configure(font="TkFixedFont")
        self.deposit.configure(foreground="#000000")
        self.deposit.configure(highlightbackground="#d9d9d9")
        self.deposit.configure(highlightcolor="black")
        self.deposit.configure(insertbackground="black")
        self.deposit.configure(selectbackground="#c4c4c4")
        self.deposit.configure(selectforeground="black")

        self.flatno = tk.Entry(top)
        self.flatno.place(relx=0.6, rely=0.161,height=20, relwidth=0.23)
        self.flatno.configure(background="white")
        self.flatno.configure(disabledforeground="#a3a3a3")
        self.flatno.configure(font="TkFixedFont")
        self.flatno.configure(foreground="#000000")
        self.flatno.configure(highlightbackground="#d9d9d9")
        self.flatno.configure(highlightcolor="black")
        self.flatno.configure(insertbackground="black")
        self.flatno.configure(selectbackground="#c4c4c4")
        self.flatno.configure(selectforeground="black")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.338, rely=0.029, height=46, width=272)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font10)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''FLAT ENTRY FORM''')

        self.Button2 = tk.Button(top,command=self.register)
        self.Button2.place(relx=0.425, rely=0.819, height=34, width=98)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#f1f1f1")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''SAVE''')

        self.Button2_17 = tk.Button(top,command=self.addlastamount)
        self.Button2_17.place(relx=0.663, rely=0.819, height=34, width=120)
        self.Button2_17.configure(activebackground="#d9d9d9")
        self.Button2_17.configure(activeforeground="#000000")
        self.Button2_17.configure(background="#f1f1f1")
        self.Button2_17.configure(disabledforeground="#a3a3a3")
        self.Button2_17.configure(foreground="#000000")
        self.Button2_17.configure(highlightbackground="#d9d9d9")
        self.Button2_17.configure(highlightcolor="black")
        self.Button2_17.configure(pady="0")
        self.Button2_17.configure(text='''LAST YEAR AMOUNT''')

        self.txtjoin = tk.Label(top)
        self.txtjoin.place(relx=0.25, rely=0.219, height=21, width=154)
        self.txtjoin.configure(activebackground="#f9f9f9")
        self.txtjoin.configure(activeforeground="black")
        self.txtjoin.configure(background="#d9d9d9")
        self.txtjoin.configure(disabledforeground="#a3a3a3")
        self.txtjoin.configure(font=font11)
        self.txtjoin.configure(foreground="#000000")
        self.txtjoin.configure(highlightbackground="#d9d9d9")
        self.txtjoin.configure(highlightcolor="black")
        self.txtjoin.configure(text='''FLAT OWNER NAME''')

        self.ownername = tk.Entry(top)
        self.ownername.place(relx=0.6, rely=0.219,height=20, relwidth=0.23)
        self.ownername.configure(background="white")
        self.ownername.configure(disabledforeground="#a3a3a3")
        self.ownername.configure(font="TkFixedFont")
        self.ownername.configure(foreground="#000000")
        self.ownername.configure(highlightbackground="#d9d9d9")
        self.ownername.configure(highlightcolor="black")
        self.ownername.configure(insertbackground="black")
        self.ownername.configure(selectbackground="#c4c4c4")
        self.ownername.configure(selectforeground="black")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.25, rely=0.439, height=21, width=154)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''AREA''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.25, rely=0.556, height=21, width=154)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''DUE DEPOSIT''')

        self.due_deposit = tk.Entry(top)
        self.due_deposit.place(relx=0.6, rely=0.556,height=20, relwidth=0.23)
        self.due_deposit.configure(background="white")
        self.due_deposit.configure(disabledforeground="#a3a3a3")
        self.due_deposit.configure(font="TkFixedFont")
        self.due_deposit.configure(foreground="#000000")
        self.due_deposit.configure(highlightbackground="#d9d9d9")
        self.due_deposit.configure(highlightcolor="black")
        self.due_deposit.configure(insertbackground="black")
        self.due_deposit.configure(selectbackground="#c4c4c4")
        self.due_deposit.configure(selectforeground="black")

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.25, rely=0.614, height=21, width=154)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''MAINTAINCE CHARGES''')

        self.maintanence = tk.Entry(top)
        self.maintanence.place(relx=0.6, rely=0.614,height=20, relwidth=0.23)
        self.maintanence.configure(background="white")
        self.maintanence.configure(disabledforeground="#a3a3a3")
        self.maintanence.configure(font="TkFixedFont")
        self.maintanence.configure(foreground="#000000")
        self.maintanence.configure(highlightbackground="#d9d9d9")
        self.maintanence.configure(highlightcolor="black")
        self.maintanence.configure(insertbackground="black")
        self.maintanence.configure(selectbackground="#c4c4c4")
        self.maintanence.configure(selectforeground="black")

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.25, rely=0.731, height=21, width=154)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''REMARK''')
        self.Label7.configure(width=154)

        self.remark = tk.Entry(top)
        self.remark.place(relx=0.6, rely=0.731,height=20, relwidth=0.23)
        self.remark.configure(background="white")
        self.remark.configure(disabledforeground="#a3a3a3")
        self.remark.configure(font="TkFixedFont")
        self.remark.configure(foreground="#000000")
        self.remark.configure(highlightbackground="#d9d9d9")
        self.remark.configure(highlightcolor="black")
        self.remark.configure(insertbackground="black")
        self.remark.configure(selectbackground="#c4c4c4")
        self.remark.configure(selectforeground="black")
        self.remark.configure(width=184)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.contact = tk.Label(top)
        self.contact.place(relx=0.25, rely=0.673, height=21, width=154)
        self.contact.configure(background="#d9d9d9")
        self.contact.configure(disabledforeground="#a3a3a3")
        self.contact.configure(foreground="#000000")
        self.contact.configure(text='''CONTACT''')
        self.contact.configure(width=154)

        self.conentry = tk.Entry(top)
        self.conentry.place(relx=0.6, rely=0.673,height=20, relwidth=0.23)
        self.conentry.configure(background="white")
        self.conentry.configure(disabledforeground="#a3a3a3")
        self.conentry.configure(font="TkFixedFont")
        self.conentry.configure(foreground="#000000")
        self.conentry.configure(insertbackground="black")
        self.conentry.configure(width=184)

        self.areatxt = tk.Entry(top)
        self.areatxt.place(relx=0.6, rely=0.439,height=20, relwidth=0.23)
        self.areatxt.configure(background="white")
        self.areatxt.configure(disabledforeground="#a3a3a3")
        self.areatxt.configure(font="TkFixedFont")
        self.areatxt.configure(foreground="#000000")
        self.areatxt.configure(insertbackground="black")
        self.areatxt.configure(width=184)

        self.address = ScrolledText(top)
        self.address.place(relx=0.6, rely=0.263, relheight=0.133, relwidth=0.226)

        self.address.configure(background="white")
        self.address.configure(font="TkTextFont")
        self.address.configure(foreground="black")
        self.address.configure(highlightbackground="#d9d9d9")
        self.address.configure(highlightcolor="black")
        self.address.configure(insertbackground="black")
        self.address.configure(insertborderwidth="3")
        self.address.configure(selectbackground="#c4c4c4")
        self.address.configure(selectforeground="black")
        self.address.configure(width=10)
        self.address.configure(wrap='none')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





