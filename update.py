#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 27, 2018 11:33:08 PM IST  platform: Windows NT
#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 27, 2018 10:42:04 PM +0530  platform: Windows NT
import login
import tkinter
import pymysql
import dbs
import sys
import home
import update
import addnew
import transaction
from tkinter import *
from tkinter import messagebox
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import search_update_support

def vp_start_gui1():
    '''Starting point when module is the main routine.'''
    global val, w, root1
    root1 = tk.Tk()
    top = Toplevel2 (root1)
    search_update_support.init(root1, top)
    root1.mainloop()

w = None
def create_Toplevel2(root1, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root1
    w = tk.Toplevel (root1)
    top = Toplevel2 (w)
    search_update_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel2():
    global w
    w.destroy()
    w = None
flatno1="";
owner_name1="";
maintainance1="";
due_amount1="";
security1="";
area1="";
address1="";
contact1="";
remark1="";
class Toplevel2:
    def home1(self):
        root1.destroy()
        home.vp_start_gui()

    def addnewbtn(self):
        root1.destroy()
        addnew.vp_start_gui()

    def monthlypaybtn(self):
        root1.destroy()
        transaction.vp_start_gui()
    def searchbtn(self):
        
        global flatno1;
        flatno1=self.search_entry.get()
        print(flatno1)
        cursor=dbs.db.cursor()
        sql="select * from flat_details where flat_no='%s'"%(flatno1)
        try:
            cursor.execute(sql)
            result=cursor.fetchall()
            self.row_count=cursor.rowcount
            if(self.row_count==0):
                messagebox.showerror("Error","No Record Found")
            else:    
                for row in result:
                    global owner_name1;
                    global maintainance1;
                    global due_amount1;
                    global security1;
                    global area1;
                    global address1;
                    global contact1;
                    global remark1;
                    owner_name1=row[1]
                    address1=row[2]
                    area1=row[3]
                    security1=row[4]
                    due_amount1=row[5]
                    maintainance1=row[6]
                    remark1=row[7]
                    contact1=row[8]
                    root1.destroy()
                    vp_start_gui()
                
        except:
            messagebox.showerror("Error","Please Contact To Developer")
    def logout1(self):
        root1.destroy()
        login.vp_start_gui()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+355+149")
        top.title("Search Details")
        top.configure(background="#2c3e50")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.home = tk.Button(top,command=self.home1)
        self.home.place(relx=0.033, rely=0.067, height=44, width=117)
        self.home.configure(activebackground="#d9d9d9")
        self.home.configure(activeforeground="#000000")
        self.home.configure(background="#f1f1f1")
        self.home.configure(disabledforeground="#a3a3a3")
        self.home.configure(foreground="#000000")
        self.home.configure(highlightbackground="#d9d9d9")
        self.home.configure(highlightcolor="black")
        self.home.configure(pady="0")
        self.home.configure(text='''HOME''')

        self.add_new_flat = tk.Button(top,command=self.addnewbtn)
        self.add_new_flat.place(relx=0.033, rely=0.2, height=44, width=117)
        self.add_new_flat.configure(activebackground="#d9d9d9")
        self.add_new_flat.configure(activeforeground="#000000")
        self.add_new_flat.configure(background="#f1f1f1")
        self.add_new_flat.configure(disabledforeground="#a3a3a3")
        self.add_new_flat.configure(foreground="#000000")
        self.add_new_flat.configure(highlightbackground="#d9d9d9")
        self.add_new_flat.configure(highlightcolor="black")
        self.add_new_flat.configure(pady="0")
        self.add_new_flat.configure(text='''ADD NEW ENTRY''')

        self.monthly_pay = tk.Button(top,command=self.monthlypaybtn)
        self.monthly_pay.place(relx=0.033, rely=0.333, height=44, width=117)
        self.monthly_pay.configure(activebackground="#d9d9d9")
        self.monthly_pay.configure(activeforeground="#000000")
        self.monthly_pay.configure(background="#f1f1f1")
        self.monthly_pay.configure(disabledforeground="#a3a3a3")
        self.monthly_pay.configure(foreground="#000000")
        self.monthly_pay.configure(highlightbackground="#d9d9d9")
        self.monthly_pay.configure(highlightcolor="black")
        self.monthly_pay.configure(pady="0")
        self.monthly_pay.configure(text='''MONTHLY PAY''')

        

        self.log_out = tk.Button(top,command=self.logout1)
        self.log_out.place(relx=0.033, rely=0.822, height=34, width=117)
        self.log_out.configure(activebackground="#d9d9d9")
        self.log_out.configure(activeforeground="#000000")
        self.log_out.configure(background="#d9d9d9")
        self.log_out.configure(disabledforeground="#a3a3a3")
        self.log_out.configure(foreground="#000000")
        self.log_out.configure(highlightbackground="#d9d9d9")
        self.log_out.configure(highlightcolor="black")
        self.log_out.configure(pady="0")
        self.log_out.configure(text='''LOGOUT''')

        self.search_entry = tk.Entry(top)
        self.search_entry.place(relx=0.3, rely=0.178,height=20, relwidth=0.507)
        self.search_entry.configure(background="white")
        self.search_entry.configure(disabledforeground="#a3a3a3")
        self.search_entry.configure(font="TkFixedFont")
        self.search_entry.configure(foreground="#000000")
        self.search_entry.configure(highlightbackground="#d9d9d9")
        self.search_entry.configure(highlightcolor="black")
        self.search_entry.configure(insertbackground="black")
        self.search_entry.configure(selectbackground="#c4c4c4")
        self.search_entry.configure(selectforeground="black")

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.4, rely=0.044, height=31, width=244)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''SEARCH- DETAILS''')

        self.Button1 = tk.Button(top,command=self.searchbtn)
        self.Button1.place(relx=0.833, rely=0.178, height=24, width=77)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f1f1f1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''SEARCH''')
        self.Button1.configure(width=77)

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import update_support
import search_update
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    update_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    update_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def searchbtn2(self):
        root.destroy()
        vp_start_gui1()
    def monthlybtn2(self):
        root.destroy()
        transaction.vp_start_gui()
    def homebtn2(self):
        root.destroy()
        home.vp_start_gui()        
    def deleteusr(self):
        global flatno1;
        
        cursor=dbs.db.cursor()
        sql="delete from flat_details where flat_no='%s'"%(flatno1)
        try:
            cursor.execute(sql)
            dbs.db.commit()
            tk.messagebox.showwarning("Deleted","Flat Record Deleted!")
            root.destroy()
            vp_start_gui1()
        except:
            dbs.db.rollback()
    def updateInfo(self):
        self.floatno2=self.flatno.get()
        self.ownername2=self.ownername.get()
        self.address2=self.address.get("1.0","end-1c")
        self.area2=self.areatxt.get()
        self.security2=self.deposit.get()
        self.dueamount2=self.due_deposit.get()
        self.maintanence2=self.maintanence.get()
        self.remark2=self.remark.get()
        self.contact2=self.conentry.get()
        self.cursor=dbs.db.cursor()
        try:
            sql = "update flat_details set owner_name='%s',address='%s',area='%s',security='%s',due_amount='%s',maintainance='%s',remark='%s',contact='%s' where flat_no='%s'"% \
            (self.ownername2,self.address2,self.area2,self.security2,self.dueamount2,self.maintanence2,self.remark2,self.contact2,self.floatno2)
            self.cursor.execute(sql)
            dbs.db.commit()
            tk.messagebox.showinfo("Done","Details Successfully Updated!!")
        except:
            dbs.db.rollback()
            tk.messagebox.showerror("Error","Database error")
    def transaction_view(self):
        global flatno1
        root3=tk.Tk()
        rows = []
        cols = []
        e =Entry(root3,relief=RIDGE)
        e.grid(row=1, column=1, sticky=NSEW)
        e.insert(END, "Flat No.")
        cols.append(e)
        e1 =Entry(root3,relief=RIDGE)
        e1.grid(row=1, column=2, sticky=NSEW)
        e1.insert(END, "Maintainance")
        cols.append(e1)
        e2 = Entry(root3,relief=RIDGE)
        e2.grid(row=1, column=3, sticky=NSEW)
        e2.insert(END, "Payment Mode")
        cols.append(e2)
        e3 = Entry(root3,relief=RIDGE)
        e3.grid(row=1, column=4, sticky=NSEW)
        e3.insert(END,"Manual Payment Date")
        cols.append(e3)
        e4 = Entry(root3,relief=RIDGE)
        e4.grid(row=1, column=5, sticky=NSEW)
        e4.insert(END, "Payment Date")
        cols.append(e4)
        e5 = Entry(root3,relief=RIDGE)
        e5.grid(row=1, column=6, sticky=NSEW)
        e5.insert(END,"Month")
        cols.append(e5)
        e7 = Entry(root3,relief=RIDGE)
        e7.grid(row=1, column=8, sticky=NSEW)
        e7.insert(END,"Security Due")
        cols.append(e7)
        e8 = Entry(root3,relief=RIDGE)
        e8.grid(row=1, column=9, sticky=NSEW)
        e8.insert(END,"Last year Due")
        cols.append(e8)
        e9 = Entry(root3,relief=RIDGE)
        e9.grid(row=1, column=10, sticky=NSEW)
        e9.insert(END,"Total Due")
        cols.append(e9)
        e6 = Entry(root3,relief=RIDGE)
        e6.grid(row=1, column=7, sticky=NSEW)
        e6.insert(END,"Remark")
        e.configure(state='disabled')
        e1.configure(state='disabled')
        e2.configure(state='disabled')
        e3.configure(state='disabled')
        e4.configure(state='disabled')
        e5.configure(state='disabled')
        e6.configure(state='disabled')

        e7.configure(state='disabled')
        e8.configure(state='disabled')
        e9.configure(state='disabled')
        cols.append(e6)
        
        cursor=dbs.db.cursor()
        cursor1=dbs.db.cursor()
        sql="select * from monthly_pay where flat_no='%s'"%(flatno1);
        sql1="select * from flat_details where flat_no='%s'"%(flatno1);
        try:
            cursor.execute(sql)
            cursor1.execute(sql1)

            result=cursor.fetchall()
            result1=cursor1.fetchall()
            j=2
            rows1=[]
            kk=[]
            myrow=tuple()
            for row in result:
                j=j+1
                rows1.append(row)
                #print(j)
                #print(row)
                flat_no=row[0]
                maintainance=row[1]
                paymentmode=row[2]
                mannualdate=row[3]
                paymentdate=row[4]
                month=row[5]
                remark=row[6]
                #print(maintainance)
                #print(j)
                
                for row3 in result1:
                    v1=row3[5]
                    v2=row3[10]
                    v3=row3[12]
                    dummy=(v1,v2,v3,)
                    myrow=rows1[rows1.index(row)]+dummy
                    kk.append(myrow)
            print(kk)
        except Exception as e1:
            print(e1)
        mm=2
        myrow1=list(myrow)
        #print(myrow1) 
        len_of=len(kk)
        for i in range(0,len_of):
            for j in range(len(kk[0])):
                e = Entry(root3,relief=RIDGE)
                e.grid(row=i+2, column=j+1, sticky=NSEW)
                e.insert(END, kk[i][j])
                e.configure(state='disabled')
        root3.title("View Transactions")
        root3.resizable(False, False)

        root3.mainloop()
    def logout2(self):
        root.destroy()
        login.vp_start_gui()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family Arial -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font11 = "-family {Arabic Transparent} -size 9 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI Semilight} -size 16 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("800x684+259+3")
        top.title("Update Details")
        top.configure(background="#2c3e50")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        
        self.Button1 = tk.Button(top,command=self.homebtn2)
        self.Button1.place(relx=0.025, rely=0.132, height=44, width=137)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f1f1f1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''HOME''')

        self.Button1_1 = tk.Button(top,command=self.monthlybtn2)
        self.Button1_1.place(relx=0.025, rely=0.219, height=44, width=137)
        self.Button1_1.configure(activebackground="#d9d9d9")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#f1f1f1")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''MONTHLY PAY''')
        self.Button1_1.configure(width=137)

        self.Button1_6 = tk.Button(top,command=self.logout2)
        self.Button1_6.place(relx=0.038, rely=0.863, height=34, width=117)
        self.Button1_6.configure(activebackground="#d9d9d9")
        self.Button1_6.configure(activeforeground="#000000")
        self.Button1_6.configure(background="#f1f1f1")
        self.Button1_6.configure(disabledforeground="#a3a3a3")
        self.Button1_6.configure(foreground="#000000")
        self.Button1_6.configure(highlightbackground="#d9d9d9")
        self.Button1_6.configure(highlightcolor="black")
        self.Button1_6.configure(pady="0")
        self.Button1_6.configure(text='''LOGOUT''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.25, rely=0.161, height=21, width=152)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font10)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''FLAT NO.''')

        self.Label1_7 = tk.Label(top)
        self.Label1_7.place(relx=0.25, rely=0.278, height=21, width=152)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font=font10)
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''ADDRESS''')

        self.Label1_9 = tk.Label(top)
        self.Label1_9.place(relx=0.25, rely=0.497, height=21, width=152)
        self.Label1_9.configure(activebackground="#f9f9f9")
        self.Label1_9.configure(activeforeground="black")
        self.Label1_9.configure(background="#d9d9d9")
        self.Label1_9.configure(disabledforeground="#a3a3a3")
        self.Label1_9.configure(font=font11)
        self.Label1_9.configure(foreground="#000000")
        self.Label1_9.configure(highlightbackground="#d9d9d9")
        self.Label1_9.configure(highlightcolor="black")
        self.Label1_9.configure(text='''SECURITY DEPOSITE''')

        self.deposit = tk.Entry(top)
        global security1
        self.deposit.insert(0,security1)

        self.deposit.place(relx=0.6, rely=0.497,height=20, relwidth=0.23)
        self.deposit.configure(background="white")
        self.deposit.configure(disabledforeground="#a3a3a3")
        self.deposit.configure(font="TkFixedFont")
        self.deposit.configure(foreground="#000000")
        self.deposit.configure(highlightbackground="#d9d9d9")
        self.deposit.configure(highlightcolor="black")
        self.deposit.configure(insertbackground="black")
        self.deposit.configure(selectbackground="#c4c4c4")
        self.deposit.configure(selectforeground="black")
        global flatno1;
        self.flatno = tk.Entry(top)
        
        self.flatno.insert(0, flatno1)
        self.flatno.config(state='disabled') # OR entry['state'] = 'disabled'
        self.flatno.place(relx=0.6, rely=0.161,height=20, relwidth=0.23)
        self.flatno.configure(background="white")
        self.flatno.configure(disabledforeground="#a3a3a3")
        self.flatno.configure(font="TkFixedFont")
        self.flatno.configure(foreground="#000000")
        self.flatno.configure(highlightbackground="#d9d9d9")
        self.flatno.configure(highlightcolor="black")
        self.flatno.configure(insertbackground="black")
        self.flatno.configure(selectbackground="#c4c4c4")
        self.flatno.configure(selectforeground="black")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.0, rely=0.0, height=36, width=802)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font9)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''UPDATE - DETAILS''')
        self.Label2.configure(width=802)

        self.Button2 = tk.Button(top,command=self.updateInfo)
        self.Button2.place(relx=0.575, rely=0.863, height=34, width=98)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#f1f1f1")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''UPDATE''')

        self.Button2_17 = tk.Button(top,command=self.deleteusr)
        self.Button2_17.place(relx=0.763, rely=0.863, height=34, width=98)
        self.Button2_17.configure(activebackground="#d9d9d9")
        self.Button2_17.configure(activeforeground="#000000")
        self.Button2_17.configure(background="#f1f1f1")
        self.Button2_17.configure(disabledforeground="#a3a3a3")
        self.Button2_17.configure(foreground="#000000")
        self.Button2_17.configure(highlightbackground="#d9d9d9")
        self.Button2_17.configure(highlightcolor="black")
        self.Button2_17.configure(pady="0")
        self.Button2_17.configure(text='''DELETE''')

        self.txtjoin = tk.Label(top)
        self.txtjoin.place(relx=0.25, rely=0.219, height=21, width=154)
        self.txtjoin.configure(activebackground="#f9f9f9")
        self.txtjoin.configure(activeforeground="black")
        self.txtjoin.configure(background="#d9d9d9")
        self.txtjoin.configure(disabledforeground="#a3a3a3")
        self.txtjoin.configure(font=font10)
        self.txtjoin.configure(foreground="#000000")
        self.txtjoin.configure(highlightbackground="#d9d9d9")
        self.txtjoin.configure(highlightcolor="black")
        self.txtjoin.configure(text='''FLAT OWNER NAME''')

        self.ownername = tk.Entry(top)
        self.ownername.insert(0, owner_name1)
        self.ownername.place(relx=0.6, rely=0.219,height=20, relwidth=0.23)
        self.ownername.configure(background="white")
        self.ownername.configure(disabledforeground="#a3a3a3")
        self.ownername.configure(font="TkFixedFont")
        self.ownername.configure(foreground="#000000")
        self.ownername.configure(highlightbackground="#d9d9d9")
        self.ownername.configure(highlightcolor="black")
        self.ownername.configure(insertbackground="black")
        self.ownername.configure(selectbackground="#c4c4c4")
        self.ownername.configure(selectforeground="black")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.25, rely=0.439, height=21, width=154)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''AREA''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.25, rely=0.556, height=21, width=154)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''DUE DEPOSIT''')

        self.due_deposit = tk.Entry(top)
        global due_amount1;
        self.due_deposit.insert(0,due_amount1)
        self.due_deposit.place(relx=0.6, rely=0.556,height=20, relwidth=0.23)
        self.due_deposit.configure(background="white")
        self.due_deposit.configure(disabledforeground="#a3a3a3")
        self.due_deposit.configure(font="TkFixedFont")
        self.due_deposit.configure(foreground="#000000")
        self.due_deposit.configure(highlightbackground="#d9d9d9")
        self.due_deposit.configure(highlightcolor="black")
        self.due_deposit.configure(insertbackground="black")
        self.due_deposit.configure(selectbackground="#c4c4c4")
        self.due_deposit.configure(selectforeground="black")

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.25, rely=0.614, height=21, width=154)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''MAINTAINCE CHARGES''')

        self.maintanence = tk.Entry(top)
        global maintainance1;
        self.maintanence.insert(0,maintainance1)
        self.maintanence.place(relx=0.6, rely=0.614,height=20, relwidth=0.23)
        self.maintanence.configure(background="white")
        self.maintanence.configure(disabledforeground="#a3a3a3")
        self.maintanence.configure(font="TkFixedFont")
        self.maintanence.configure(foreground="#000000")
        self.maintanence.configure(highlightbackground="#d9d9d9")
        self.maintanence.configure(highlightcolor="black")
        self.maintanence.configure(insertbackground="black")
        self.maintanence.configure(selectbackground="#c4c4c4")
        self.maintanence.configure(selectforeground="black")

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.25, rely=0.731, height=21, width=154)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''REMARK''')

        self.remark = tk.Entry(top)
        global remark1;
        self.remark.insert(0,remark1)
        self.remark.place(relx=0.6, rely=0.731,height=20, relwidth=0.23)
        self.remark.configure(background="white")
        self.remark.configure(disabledforeground="#a3a3a3")
        self.remark.configure(font="TkFixedFont")
        self.remark.configure(foreground="#000000")
        self.remark.configure(highlightbackground="#d9d9d9")
        self.remark.configure(highlightcolor="black")
        self.remark.configure(insertbackground="black")
        self.remark.configure(selectbackground="#c4c4c4")
        self.remark.configure(selectforeground="black")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.contact = tk.Label(top)
        self.contact.place(relx=0.25, rely=0.673, height=21, width=154)
        self.contact.configure(activebackground="#f9f9f9")
        self.contact.configure(activeforeground="black")
        self.contact.configure(background="#d9d9d9")
        self.contact.configure(disabledforeground="#a3a3a3")
        self.contact.configure(foreground="#000000")
        self.contact.configure(highlightbackground="#d9d9d9")
        self.contact.configure(highlightcolor="black")
        self.contact.configure(text='''CONTACT''')

        self.conentry = tk.Entry(top)
        global contact1;
        self.conentry.insert(0,contact1)
        self.conentry.place(relx=0.6, rely=0.673,height=20, relwidth=0.23)
        self.conentry.configure(background="white")
        self.conentry.configure(disabledforeground="#a3a3a3")
        self.conentry.configure(font="TkFixedFont")
        self.conentry.configure(foreground="#000000")
        self.conentry.configure(highlightbackground="#d9d9d9")
        self.conentry.configure(highlightcolor="black")
        self.conentry.configure(insertbackground="black")
        self.conentry.configure(selectbackground="#c4c4c4")
        self.conentry.configure(selectforeground="black")

        self.areatxt = tk.Entry(top)
        self.areatxt.insert(0,area1);
        self.areatxt.place(relx=0.6, rely=0.439,height=20, relwidth=0.23)
        self.areatxt.configure(background="white")
        self.areatxt.configure(disabledforeground="#a3a3a3")
        self.areatxt.configure(font="TkFixedFont")
        self.areatxt.configure(foreground="#000000")
        self.areatxt.configure(highlightbackground="#d9d9d9")
        self.areatxt.configure(highlightcolor="black")
        self.areatxt.configure(insertbackground="black")
        self.areatxt.configure(selectbackground="#c4c4c4")
        self.areatxt.configure(selectforeground="black")

        self.address = ScrolledText(top)
        global address1;
        self.address.insert(tk.END,address1)
        self.address.place(relx=0.6, rely=0.263, relheight=0.133, relwidth=0.226)

        self.address.configure(background="white")
        self.address.configure(font="TkTextFont")
        self.address.configure(foreground="black")
        self.address.configure(highlightbackground="#d9d9d9")
        self.address.configure(highlightcolor="black")
        self.address.configure(insertbackground="black")
        self.address.configure(insertborderwidth="3")
        self.address.configure(selectbackground="#c4c4c4")
        self.address.configure(selectforeground="black")
        self.address.configure(width=10)
        self.address.configure(wrap='none')

        self.Button3 = tk.Button(top,command=self.searchbtn2)
        self.Button3.place(relx=0.025, rely=0.307, height=44, width=137)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#f1f1f1")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''SEARCH''')
        self.Button3.configure(width=137)

        self.Button2_1 = tk.Button(top,command=self.transaction_view)
        self.Button2_1.place(relx=0.35, rely=0.863, height=34, width=138)
        self.Button2_1.configure(activebackground="#d9d9d9")
        self.Button2_1.configure(activeforeground="#000000")
        self.Button2_1.configure(background="#f1f1f1")
        self.Button2_1.configure(disabledforeground="#a3a3a3")
        self.Button2_1.configure(foreground="#000000")
        self.Button2_1.configure(highlightbackground="#d9d9d9")
        self.Button2_1.configure(highlightcolor="black")
        self.Button2_1.configure(pady="0")
        self.Button2_1.configure(text='''TRANSACTION INFO''')
        self.Button2_1.configure(width=138)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui1()





