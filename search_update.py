#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.18
#  in conjunction with Tcl version 8.6
#    Nov 27, 2018 10:42:04 PM +0530  platform: Windows NT
import login
import dbs
import sys
import home
import update
from tkinter import messagebox
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import search_update_support

def vp_start_gui1():
    '''Starting point when module is the main routine.'''
    global val, w, root1
    root1 = tk.Tk()
    top = Toplevel2 (root1)
    search_update_support.init(root1, top)
    root1.mainloop()

w = None
def create_Toplevel2(root1, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root1
    w = tk.Toplevel (root1)
    top = Toplevel2 (w)
    search_update_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel2():
    global w
    w.destroy()
    w = None

class Toplevel2:
    global flatno1;
    def searchbtn(self):
        global owner_name1;
        global maintainance1;
        global due_amount1;
        global security1;
        global area1;
        global address1;
        global contact1;
        global remark1;
        flatno1=self.search_entry.get()
        print(flatno1)
        cursor=dbs.db.cursor()
        sql="select * from flat_details where flat_no='%s'"%(flatno1)
        try:
            cursor.execute(sql)
            result=cursor.fetchall()
            self.row_count=cursor.rowcount
            if(self.row_count==0):
                messagebox.showerror("Error","No Record Found")
            else:    
                for row in result:
                    owner_name1=row[1]
                    address1=row[2]
                    area1=row[3]
                    security1=row[4]
                    due_amount1=row[5]
                    maintainance1=row[6]
                    remark1=row[7]
                    contact1=row[8]
                #root1.destroy()
                update.vp_start_gui()
        except:
            messagebox.showerror("Error","Please Contact To Developer")
    def logout1(self):
        root.destroy()
        login.vp_start_gui()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+355+149")
        top.title("Search Details")
        top.configure(background="#2c3e50")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.home = tk.Button(top)
        self.home.place(relx=0.033, rely=0.067, height=44, width=117)
        self.home.configure(activebackground="#d9d9d9")
        self.home.configure(activeforeground="#000000")
        self.home.configure(background="#f1f1f1")
        self.home.configure(disabledforeground="#a3a3a3")
        self.home.configure(foreground="#000000")
        self.home.configure(highlightbackground="#d9d9d9")
        self.home.configure(highlightcolor="black")
        self.home.configure(pady="0")
        self.home.configure(text='''HOME''')

        self.add_new_flat = tk.Button(top)
        self.add_new_flat.place(relx=0.033, rely=0.2, height=44, width=117)
        self.add_new_flat.configure(activebackground="#d9d9d9")
        self.add_new_flat.configure(activeforeground="#000000")
        self.add_new_flat.configure(background="#f1f1f1")
        self.add_new_flat.configure(disabledforeground="#a3a3a3")
        self.add_new_flat.configure(foreground="#000000")
        self.add_new_flat.configure(highlightbackground="#d9d9d9")
        self.add_new_flat.configure(highlightcolor="black")
        self.add_new_flat.configure(pady="0")
        self.add_new_flat.configure(text='''ADD NEW ENTRY''')

        self.monthly_pay = tk.Button(top)
        self.monthly_pay.place(relx=0.033, rely=0.333, height=44, width=117)
        self.monthly_pay.configure(activebackground="#d9d9d9")
        self.monthly_pay.configure(activeforeground="#000000")
        self.monthly_pay.configure(background="#f1f1f1")
        self.monthly_pay.configure(disabledforeground="#a3a3a3")
        self.monthly_pay.configure(foreground="#000000")
        self.monthly_pay.configure(highlightbackground="#d9d9d9")
        self.monthly_pay.configure(highlightcolor="black")
        self.monthly_pay.configure(pady="0")
        self.monthly_pay.configure(text='''MONTHLY PAY''')

        self.view_details = tk.Button(top)
        self.view_details.place(relx=0.033, rely=0.467, height=44, width=117)
        self.view_details.configure(activebackground="#d9d9d9")
        self.view_details.configure(activeforeground="#000000")
        self.view_details.configure(background="#f1f1f1")
        self.view_details.configure(disabledforeground="#a3a3a3")
        self.view_details.configure(foreground="#000000")
        self.view_details.configure(highlightbackground="#d9d9d9")
        self.view_details.configure(highlightcolor="black")
        self.view_details.configure(pady="0")
        self.view_details.configure(text='''CHECK DETAILS''')

        self.log_out = tk.Button(top,command=logout1)
        self.log_out.place(relx=0.033, rely=0.822, height=34, width=117)
        self.log_out.configure(activebackground="#d9d9d9")
        self.log_out.configure(activeforeground="#000000")
        self.log_out.configure(background="#d9d9d9")
        self.log_out.configure(disabledforeground="#a3a3a3")
        self.log_out.configure(foreground="#000000")
        self.log_out.configure(highlightbackground="#d9d9d9")
        self.log_out.configure(highlightcolor="black")
        self.log_out.configure(pady="0")
        self.log_out.configure(text='''LOGOUT''')

        self.search_entry = tk.Entry(top)
        self.search_entry.place(relx=0.3, rely=0.178,height=20, relwidth=0.507)
        self.search_entry.configure(background="white")
        self.search_entry.configure(disabledforeground="#a3a3a3")
        self.search_entry.configure(font="TkFixedFont")
        self.search_entry.configure(foreground="#000000")
        self.search_entry.configure(highlightbackground="#d9d9d9")
        self.search_entry.configure(highlightcolor="black")
        self.search_entry.configure(insertbackground="black")
        self.search_entry.configure(selectbackground="#c4c4c4")
        self.search_entry.configure(selectforeground="black")

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.4, rely=0.044, height=31, width=244)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''SEARCH- DETAILS''')

        self.Button1 = tk.Button(top,command=self.searchbtn)
        self.Button1.place(relx=0.833, rely=0.178, height=24, width=77)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#f1f1f1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''SEARCH''')
        self.Button1.configure(width=77)

if __name__ == '__main__':
    vp_start_gui1()





